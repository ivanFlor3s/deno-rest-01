const exports = {};
Object.defineProperty(exports, "__esModule", { value: true });

import {
  Debug,
  Decimal,
  decompressFromBase64,
  empty,
  Extensions,
  getPrismaClient,
  join,
  makeStrictEnum,
  NotFoundError,
  objectEnumValues,
  PrismaClientInitializationError,
  PrismaClientKnownRequestError,
  PrismaClientRustPanicError,
  PrismaClientUnknownRequestError,
  PrismaClientValidationError,
  raw,
  sqltag,
} from ".././runtime/edge-esm.js";

const Prisma = {};

exports.Prisma = Prisma;

/**
 * Prisma Client JS version: 4.7.0
 * Query Engine version: 39190b250ebc338586e25e6da45e5e783bc8a635
 */
Prisma.prismaVersion = {
  client: "4.7.0",
  engine: "39190b250ebc338586e25e6da45e5e783bc8a635",
};

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError;
Prisma.PrismaClientInitializationError = PrismaClientInitializationError;
Prisma.PrismaClientValidationError = PrismaClientValidationError;
Prisma.NotFoundError = NotFoundError;
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag;
Prisma.empty = empty;
Prisma.join = join;
Prisma.raw = raw;
Prisma.validator = () => (val) => val;

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
};

const dirname = "/";

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) {
  return x;
}

exports.Prisma.QueryMode = makeEnum({
  default: "default",
  insensitive: "insensitive",
});

exports.Prisma.SortOrder = makeEnum({
  asc: "asc",
  desc: "desc",
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: "ReadUncommitted",
  ReadCommitted: "ReadCommitted",
  RepeatableRead: "RepeatableRead",
  Serializable: "Serializable",
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: "id",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  googleAcount: "googleAcount",
  email: "email",
  name: "name",
  lastname: "lastname",
  imageUrl: "imageUrl",
  hash: "hash",
});

exports.Prisma.ModelName = makeEnum({
  User: "User",
});

const compressedDMMF =
  "";
const decompressedDMMF = decompressFromBase64(compressedDMMF);
// We are parsing 2 times, as we want independent objects, because
// DMMFClass introduces circular references in the dmmf object
const dmmf = JSON.parse(decompressedDMMF);
exports.Prisma.dmmf = JSON.parse(decompressedDMMF);

/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js",
    },
    "output": {
      "value": "C:\\workspace\\deno-rest-01\\generated\\client",
      "fromEnvVar": null,
    },
    "config": {
      "engineType": "library",
    },
    "binaryTargets": [],
    "previewFeatures": [
      "deno",
    ],
    "isCustomOutput": true,
  },
  "relativeEnvPaths": {
    "rootEnvPath": "..\\..\\.env",
    "schemaEnvPath": "..\\..\\.env",
  },
  "relativePath": "..\\..\\prisma",
  "clientVersion": "4.7.0",
  "engineVersion": "39190b250ebc338586e25e6da45e5e783bc8a635",
  "datasourceNames": [
    "db",
  ],
  "activeProvider": "postgresql",
  "dataProxy": true,
};
config.document = dmmf;
config.dirname = dirname;

config.inlineSchema =
  "Ly8gVGhpcyBpcyB5b3VyIFByaXNtYSBzY2hlbWEgZmlsZSwKLy8gbGVhcm4gbW9yZSBhYm91dCBpdCBpbiB0aGUgZG9jczogaHR0cHM6Ly9wcmlzLmx5L2QvcHJpc21hLXNjaGVtYQoKZ2VuZXJhdG9yIGNsaWVudCB7CiAgcHJvdmlkZXIgICAgICAgID0gInByaXNtYS1jbGllbnQtanMiCiAgcHJldmlld0ZlYXR1cmVzID0gWyJkZW5vIl0KICBvdXRwdXQgICAgICAgICAgPSAiLi4vZ2VuZXJhdGVkL2NsaWVudCIKfQoKZGF0YXNvdXJjZSBkYiB7CiAgcHJvdmlkZXIgPSAicG9zdGdyZXNxbCIKICB1cmwgICAgICA9IGVudigiREFUQUJBU0VfVVJMIikKfQoKbW9kZWwgVXNlciB7CiAgaWQgICAgICAgICAgIEludCAgICAgIEBpZCBAZGVmYXVsdChhdXRvaW5jcmVtZW50KCkpCiAgY3JlYXRlZEF0ICAgIERhdGVUaW1lIEBkZWZhdWx0KG5vdygpKQogIHVwZGF0ZWRBdCAgICBEYXRlVGltZSBAdXBkYXRlZEF0CiAgZ29vZ2xlQWNvdW50IEJvb2xlYW4gIEBkZWZhdWx0KGZhbHNlKQogIGVtYWlsICAgICAgICBTdHJpbmcgICBAdW5pcXVlCiAgbmFtZSAgICAgICAgIFN0cmluZz8KICBsYXN0bmFtZSAgICAgU3RyaW5nPwogIGltYWdlVXJsICAgICBTdHJpbmcgICBAZGVmYXVsdCgiIikKICBoYXNoICAgICAgICAgU3RyaW5nCn0K";
config.inlineSchemaHash =
  "b36e0ed6cd69be07e5de3130fee183ee1643a5ff057cb896746013440787371e";

config.inlineDatasources = {
  "db": {
    "url": {
      "fromEnvVar": "DATABASE_URL",
      "value": null,
    },
  },
};

config.injectableEdgeEnv = {
  parsed: {
    DATABASE_URL:
      typeof globalThis !== "undefined" && globalThis["DATABASE_URL"] ||
      typeof process !== "undefined" && process.env &&
        process.env.DATABASE_URL ||
      undefined,
  },
};

if (
  typeof globalThis !== "undefined" && globalThis["DEBUG"] ||
  typeof process !== "undefined" && process.env && process.env.DEBUG ||
  undefined
) {
  Debug.enable(
    typeof globalThis !== "undefined" && globalThis["DEBUG"] ||
      typeof process !== "undefined" && process.env && process.env.DEBUG ||
      undefined,
  );
}

const PrismaClient = getPrismaClient(config);
exports.PrismaClient = PrismaClient;
Object.assign(exports, Prisma);
export { exports as default, Prisma, PrismaClient };
